/**
 * Copyright (C) 2006-2024 Talend Inc. - www.talend.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
final def veracodeCredentials = usernamePassword(
        credentialsId: 'veracode-api-credentials',
        passwordVariable: 'VERACODE_KEY',
        usernameVariable: 'VERACODE_ID')

// Maven package skipped elements
// Everything that is not needed for the veracode scan is excluded to reduce time
SKIP_OPTS = [
        // '--define maven.test.skip=true',  // Keep test build because dq processor need test dependencies.
        '--define skipTests=true',           // Skip test execution
        '--define spotless.apply.skip=true',
        '--define checkstyle.skip=true',
        '--define rat.skip=true',
        '--define invoker.skip=true',
        '--define enforcer.skip=true'
].join(' ')

pipeline {
    agent {
        kubernetes {
            yamlFile '.jenkins/jenkins_pod.yml'
            defaultContainer 'main'
        }
    }

    environment {
        MAVEN_OPTS = ['-Dmaven.artifact.threads=128',
                      '-Dorg.slf4j.simpleLogger.showThreadName=true',
                      '-Dorg.slf4j.simpleLogger.showDateTime=true',
                      '-Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss'].join(' ')
        TALEND_REGISTRY = 'registry.datapwn.com'
        VERACODE_APP_NAME = 'Components'
        VERACODE_SANDBOX = 'connectors-lib-se'
        APP_ID = '579232'
    }

    options {
        buildDiscarder(logRotator(artifactNumToKeepStr: '5', numToKeepStr: '5'))
        timeout(time: 60, unit: 'MINUTES')
        skipStagesAfterUnstable()
    }

    parameters {
        booleanParam(
                name: 'VERACODE_SCA',
                defaultValue: true,
                description: 'Veracode SCA (Source Clear Analysis)')
        booleanParam(
                name: 'VERACODE_SAST',
                defaultValue: true,
                description: 'Veracode SAST (Static testing)')
        booleanParam(
                name: 'JENKINS_DEBUG',
                defaultValue: false,
                description: '''
        Add an extra comportment to the job allowing analysis:
          - keep the pod alive for debug purposes''')
    }

    stages {
        stage('Preliminary steps') {
            steps {
                ///////////////////////////////////////////
                // Update build info
                ///////////////////////////////////////////
                script {
                    ArrayList scans = []
                    if (params.VERACODE_SCA) {
                        scans.add('SCA')
                    }
                    if (params.VERACODE_SAST) {
                        scans.add('SAST')
                    }
                    job_name_creation(scans.join('+') as String)
                }
                ///////////////////////////////////////////
                // asdf install
                ///////////////////////////////////////////
                script {
                    println "asdf install the content of repository .tool-versions"
                    sh 'bash .jenkins/asdf_install.sh'
                }
            }
        }

        stage("Veracode SCA (Source Clear Analysis)") {
            when {
                expression { params.VERACODE_SCA }
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'veracode-token', variable: 'SRCCLR_API_TOKEN'),
                                     nexusCredentials]) {
                        sh "bash .jenkins/veracode-sca.sh $SRCCLR_API_TOKEN"
                    }
                }
            }
        }

        stage('Package the app for Static testing') {
            when {
                expression { params.VERACODE_SAST }
            }
            steps {
                withCredentials([veracodeCredentials,
                                 nexusCredentials]) {
                    script {
                        // Execute a mvn package skipping not needed element
                        sh "bash .jenkins/mvn_package.sh ${SKIP_OPTS}"
                    }
                }
            }
        }

        stage('Veracode SAST (Static testing)') {
            when {
                expression { params.VERACODE_SAST }
            }
            steps {
                script {
                    withCredentials([veracodeCredentials]) {
                        veracode applicationName: "$VERACODE_SANDBOX",
                                teams: "Components",
                                canFailJob: true,
                                createProfile: true,
                                criticality: "High",
                                debug: true,
                                copyRemoteFiles: true,
                                fileNamePattern: '',
                                useProxy: false,
                                replacementPattern: '',
                                scanExcludesPattern: '',
                                scanIncludesPattern: '',
                                scanName: "master-${currentBuild.number}-${currentBuild.startTimeInMillis}",
                                uploadExcludesPattern: '',
                                uploadIncludesPattern: '**/*.jar',
                                waitForScan: true,
                                vid: "$VERACODE_ID",
                                vkey: "$VERACODE_KEY"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                if (params.JENKINS_DEBUG) {
                    jenkinsBreakpoint()
                }
            }
        }
        /*
        success {
            slackSend(
                    color: '#00FF00',
                    message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})",
                    channel: "${env.SLACK_CI_CHANNEL}")
        }
        failure {
            slackSend(
                    color: '#FF0000',
                    message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})",
                    channel: "${env.SLACK_CI_CHANNEL}")
        }
        */
    }
}


/**
 * Append a new line to job description
 * REM This is MARKDOWN, do not forget double space at the end of line
 *
 * @param new line
 * @return void
 */
private void job_name_creation(String extra) {
    String user_name = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause').userId[0]
    if (user_name == null) {
        user_name = "auto"
    }

    currentBuild.displayName = (
            "#$currentBuild.number-$extra-$user_name"
    )
}

/**
 * Implement a simple breakpoint to stop actual job
 * Use the method anywhere you need to stop
 * The first usage is to keep the pod alive on post stage.
 * Change and restore the job description to be more visible
 *
 * @param job_description_to_backup
 * @return void
 */
private void jenkinsBreakpoint() {
    // Backup the description
    String job_description_backup = currentBuild.description
    // updating build description
    currentBuild.description = "ACTION NEEDED TO CONTINUE \n ${job_description_backup}"
    // Request user action
    input message: 'Finish the job?', ok: 'Yes'
    // updating build description
    currentBuild.description = "$job_description_backup"
}